import os
import sys
import pprint
import pickle

from collections import namedtuple
from functools import partial

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

import rubikscube as rc

def print_run_stats(fitnesses, sizes, file=sys.stdout):
    record_fmt = "{min} to {max} (mean {mean}, std {std})"
    row_fmt = "{gen}\tFit: {fit}/Size: {size}"

    for i, (fit_record, size_record) in enumerate(zip(fitnesses, sizes)):
        fit_str = record_fmt.format(**fit_record._asdict())
        size_str = record_fmt.format(**size_record._asdict())
        print(row_fmt.format(gen=i, fit=fit_str, size=size_str), file=file)


def plot_records(path, records):
    f = pd.DataFrame.from_records(records, columns=["min", "max", "mean", "std"])
    f.plot()
    plt.savefig(path)


Individuals = namedtuple("Individuals", ["best", "pop"])


def log_run(run_dir, config, stats, timestamps):
    log_file_path = os.path.join(run_dir, "run.log")
    with open(log_file_path, "a") as f:
        pp = pprint.PrettyPrinter(stream=f, indent=4)
        log = partial(print, file=f)

        header_fmt = """RUBIK'S CUBE GA RUN LOG

        This run started at {start}
        It took {duration}s to finish\n"""
        log(header_fmt.format(**timestamps._asdict()))
        log("Configuration:")
        pp.pprint(config)
        log("\nRun stats:")

        fitnesses = stats['fitness']
        sizes = stats['size']
        print_run_stats(fitnesses, sizes, file=f)

        for filename, records in [("fitness.pdf", fitnesses), ("size.pdf", sizes)]:
            path = os.path.join(run_dir, filename)
            plot_records(path, records)


def log_individuals(run_dir, best, pop, best_cube):
    pickle_path = os.path.join(run_dir, "individuals.pickle")
    with open(pickle_path, "wb") as f:
        pickle.dump(Individuals(best=best, pop=pop), f)

    log_path = os.path.join(run_dir, "individuals.log")
    with open(log_path, "w") as f:
        log = partial(print, file=f)
        log("INDIVIDUALS LOG")
        log("Best individual:", best)
        log("Cube generated by the best individual:")
        rc.print_3d_cube(best_cube, file=f)

        log("\nAll individuals:")
        for i, ind in enumerate(pop):
            log(i, ind)

