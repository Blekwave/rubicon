import os
import sys
import pprint
import pickle

from collections import namedtuple
from functools import partial

import rubikscube as rc

try:
    from plotting import plot_graphs
except ImportError:
    print("Matplotlib is unavailable, plot_graphs will do nothing")
    def plot_graphs(*args, **kwargs):
        pass


def print_run_stats(stats, file=sys.stdout, multi=False):
    """Prints text stats for a GA run or set of runs to a log file.

    Parameters:
    - stats: stats dictionary for a single run or summarized stats dict
             for all runs, if multi is True.
    - file: stream to which these stats should be printed.
    - multi: whether the stats regard a single run or multiple runs."""
    record_fmt = "{min} to {max} (mean {mean}, std {std})"
    summary_record_fmt = ("Min:\tmin {min_mins}, mean {mean_mins}, std {std_mins}/"
                          "Max: {mean_maxes}\n"
                          "Means:\tmin {min_means}, mean {mean_means}, std {std_means}/"
                          "Std: {mean_stds}\n")
    row_fmt = "{gen}\tFit: {fit}/Size: {size}/Same: {same}, Improved: {improved}"

    stat_lists = (stats['fitness'], stats['size'], stats['same'], stats['improved'])
    for i, (fit, size, same, improved) in enumerate(zip(*stat_lists)):
        if multi:
            fit_str = summary_record_fmt.format(**fit._asdict())
            size_str = summary_record_fmt.format(**size._asdict())
            same_str = record_fmt.format(**same._asdict())
            improved_str =record_fmt.format(**improved._asdict())
        else:
            fit_str = record_fmt.format(**fit._asdict())
            size_str = record_fmt.format(**size._asdict())
            same_str = str(same)
            improved_str = str(improved)
        row = row_fmt.format(gen=i, fit=fit_str, size=size_str, same=same_str,
                             improved=improved_str)
        print(row, file=file)


def log_run(run_dir, config, stats, duration):
    """Logs a single run's stats and plots graphs for these stats

    Parameters:
    - run_dir: directory to which these stats should be saved
    - config: configuration object for the run
    - stats: stats dictionary returned by the run
    - duration: duration of the run, in seconds"""
    log_file_path = os.path.join(run_dir, "run.log")
    with open(log_file_path, "a") as f:
        pp = pprint.PrettyPrinter(stream=f, indent=4)
        log = partial(print, file=f)

        header_fmt = """RUBIK'S CUBE GA RUN LOG

        This run took {duration}s to finish\n"""
        log(header_fmt.format(duration=duration))
        log("Configuration:")
        pp.pprint(config)
        log("\nRun stats:")
        print_run_stats(stats, file=f)
        plot_graphs(stats, run_dir, file=f)


def log_multi_run(all_runs_dir, config, summary, duration):
    """Logs summarized stats for a set of GA runs and plots graphs.

    Parameters:
    - all_runs_dir: directory to which these stats should be saved
    - config: configuration object for the runs
    - stats: summarized stats dictionary obtained via rc.summarize_stats
    - duration: duration of all runs, in seconds"""
    log_file_path = os.path.join(all_runs_dir, "all_runs.log")
    with open(log_file_path, "a") as f:
        pp = pprint.PrettyPrinter(stream=f, indent=4)
        log = partial(print, file=f)

        header_fmt = """RUBIK'S CUBE GA MULTI RUN LOG

        All {runs} runs combined took {duration}s to finish\n"""
        log(header_fmt.format(runs=config['Runs'], duration=duration))
        log("Configuration:")
        pp.pprint(config)
        log("\nRun stat summary:")
        print_run_stats(summary, file=f, multi=True)
        plot_graphs(summary, all_runs_dir, file=f)


Individuals = namedtuple("Individuals", ["best", "pop"])


def log_individuals(run_dir, fit_and_pop, best_cube):
    """Saves information about a run's individuals to a directory

    Also saves the individuals themselves in a pickle file. May be
    used to save the best individuals in a set of runs as well.

    Parameters:
    - run_dir: directory to which these stats should be saved
    - fit_and_pop: list of tuples of an individual's fitness and the
                   individual itself.
    - best_cube: the cube generated by the best individual."""
    fitness, pop = list(zip(*fit_and_pop))
    best_fitness, best = min(fit_and_pop)

    pickle_path = os.path.join(run_dir, "individuals.pickle")
    with open(pickle_path, "wb") as f:
        pickle.dump(Individuals(best=best, pop=pop), f)

    log_path = os.path.join(run_dir, "individuals.log")
    with open(log_path, "w") as f:
        log = partial(print, file=f)
        log("INDIVIDUALS LOG")
        log("Best individual:", best, "/ Fitness:", best_fitness)
        log("Cube generated by the best individual:")
        rc.print_3d_cube(best_cube, file=f)

        log("\nAll individuals:")
        for i, (fit, ind) in enumerate(fit_and_pop):
            log(i, ind, fit)

